const pool = require('../database');

// Send a new message
// controllers/messageController.js

const sendMessage = async (req, res) => {
    const { userId, channelId, message } = req.body;

    if (!channelId) {
        return res.status(400).json({ message: "Channel ID is required" });
    }

    try {
        // Check if the channel exists
        const [channel] = await pool.query('SELECT * FROM channels WHERE id = ?', [channelId]);
        if (channel.length === 0) {
            return res.status(400).json({ message: "Channel does not exist" });
        }

        const [result] = await pool.query(
            'INSERT INTO messages (channel_id, user_id, content, created_at) VALUES (?, ?, ?, NOW())',
            [channelId, userId, message]
        );

        const newMessage = {
            id: result.insertId,
            channel_id: channelId,
            user_id: userId,
            message: message,
            created_at: new Date().toISOString()
        };
        res.status(201).json(newMessage);
    } catch (error) {
        console.error('Error sending message:', error);
        res.status(500).json({ message: 'Failed to send message' });
    }
};





// GET all messages
const getAllMessages = async (req, res) => {
    try {
        const [messages] = await pool.query('SELECT * FROM messages');
        res.json(messages);
    } catch (error) {
        console.error('Error fetching messages:', error);
        res.status(500).json({ message: 'Failed to get messages' });
    }
};

// Get messages for a specific channel
const getChannelMessages = async (req, res) => {
    const { channelId } = req.params;

    try {
        const [messages] = await pool.query('SELECT * FROM messages WHERE channel_id = ?', [channelId]);
        res.json(messages);
    } catch (error) {
        console.error('Error fetching channel messages:', error);
        res.status(500).json({ message: 'Failed to get messages for the channel' });
    }
};

module.exports = {
    sendMessage,
    getAllMessages,
    getChannelMessages
};
